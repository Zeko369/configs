var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { spawn } from "child_process";
var defaultConfig = {
    execOptions: {},
    logProcess: true
};
export function execGitCmd(args, cmdConfig) {
    return new Promise(function (resolve, reject) {
        if (!args.length) {
            reject("No arguments were given");
        }
        cmdConfig = __assign({}, defaultConfig, cmdConfig);
        if (cmdConfig.logProcess) {
            var message = cmdConfig.customMsg ? cmdConfig.customMsg + "..." : "git " + args[0] + " is executing...";
            console.log('\x1b[36m%s\x1b[0m', message);
        }
        var commandExecuter = spawn('git', args, cmdConfig.execOptions);
        var stdOutData = '';
        var stderrData = '';
        commandExecuter.stdout.on('data', function (data) { return stdOutData += data; });
        commandExecuter.stderr.on('data', function (data) { return stderrData += data; });
        commandExecuter.on('close', function (code) { return code != 0 ? reject(stderrData.toString()) : resolve(stdOutData.toString()); });
    });
}
//# sourceMappingURL=index.js.map